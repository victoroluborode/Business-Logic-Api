generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id           String          @id @default(uuid())
  name         String          @unique
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  users        User[]          @relation("OrganizationUsers")
  projects     Project[]       @relation("OrganizationProjects")
  tasks        Task[]          @relation("OrganizationTasks")
  activityLogs ActivityLog[]   @relation("OrganizationActivityLogs")
}

model User {
  id               String       @id @default(uuid())
  name             String
  email            String       @unique
  passwordHash     String
  role             Role         @relation(fields: [roleId], references: [id])
  roleId           String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  organization     Organization @relation("OrganizationUsers", fields: [organizationId], references: [id])
  organizationId   String
  isDeactivated    Boolean      @default(false)
  tasks            Task[]
  activityLogs     ActivityLog[] @relation("UserActivityLogs")
  @@index([organizationId])
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  permissions String[]
  users       User[]
}

model Project {
  id               String    @id @default(uuid())
  name             String
  description      String?
  status           String    @default("Active")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  organization     Organization @relation("OrganizationProjects", fields: [organizationId], references: [id])
  organizationId   String
  tasks            Task[]
  isDeleted        Boolean   @default(false)
  deletedAt        DateTime?
}

model Task {
  id               String    @id @default(uuid())
  title            String
  description      String?
  status           String    @default("Pending")
  priority         String    @default("Medium")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  organization     Organization @relation("OrganizationTasks", fields: [organizationId], references: [id])
  organizationId   String
  project          Project?  @relation(fields: [projectId], references: [id])
  projectId        String?
  assignee         User?     @relation(fields: [assigneeId], references: [id])
  assigneeId       String?
  isDeleted        Boolean   @default(false)
  deletedAt        DateTime?
}

model ActivityLog {
  id               String    @id @default(uuid())
  action           String
  details          String?
  createdAt        DateTime  @default(now())
  organization     Organization @relation("OrganizationActivityLogs", fields: [organizationId], references: [id])
  organizationId   String
  user             User?     @relation("UserActivityLogs", fields: [userId], references: [id])
  userId           String?
}
